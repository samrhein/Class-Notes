<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-21</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font( munro )

active_inv_size = 4
entire_inv_height = 4
entire_inv_width = 4
drag = false
list_add = 2
list_add_id = 0
buildable_item = noone
build_hover = false
show = 'SHOW'

instance_create(0,0,oBlockHighlight)

/*ARRAY STUFF
[i,0] = item quantity
[i,1] = object created in game when equiped
[i,2] = 1st item in recipe
[i,3] = 2nd item in recipe
[i,4] = 3rd item in recipe
[i,5] = amount req of 1st item in recipe
[i,6] = amount req of 2nd item in recipe
[i,7] = amount req of 3rd item in recipe
*/

//create a list of all icon objects
//so we can search for one by name and return the array position
item_names = ds_list_create();
ds_list_add( item_names, sWoodIcon );
ds_list_add( item_names, sDirtIcon ); 
ds_list_add( item_names, sBoomerangIcon );
ds_list_add( item_names, sDynomiteIcon );
ds_list_add( item_names, sIronoreIcon );
ds_list_add( item_names, sCoalIcon );
ds_list_add( item_names, sIronIcon );
ds_list_add( item_names, sPowderIcon );
ds_list_add( item_names, sPebbleIcon );
ds_list_add( item_names, sSandIcon );
ds_list_add( item_names, sStickIcon );
ds_list_add( item_names, sTwineIcon );
ds_list_add( item_names, sFireIcon );

//number of all items
item_length = ds_list_size( item_names );

//wood
all_items[0,0] = 10
all_items[0,1] = noone
all_items[0,2] = noone
all_items[0,3] = noone
all_items[0,4] = noone

//dirt
all_items[1,0] = 12
all_items[1,1] = noone
all_items[1,2] = noone
all_items[1,3] = noone
all_items[1,4] = noone

//boomerang
all_items[2,0] = 7
all_items[2,1] = oBoomerang
all_items[2,2] = sWoodIcon
all_items[2,3] = sDirtIcon
all_items[2,4] = noone
all_items[2,5] = 3
all_items[2,6] = 2

//dynomite
all_items[3,0] = 4
all_items[3,1] = oDyno
all_items[3,2] = sWoodIcon
all_items[3,3] = sDirtIcon
all_items[3,4] = sIronIcon
all_items[3,5] = 3
all_items[3,6] = 2
all_items[3,7] = 4

//iron ore
all_items[4,0] = 4
all_items[4,1] = noone
all_items[4,2] = noone
all_items[4,3] = noone
all_items[4,4] = noone

//coal
all_items[5,0] = 5
all_items[5,1] = noone
all_items[5,2] = noone
all_items[5,3] = noone
all_items[5,4] = noone

//iron
all_items[6,0] = 6
all_items[6,1] = noone
all_items[6,2] = sIronoreIcon
all_items[6,3] = sFireIcon
all_items[6,4] = noone
all_items[6,5] = 3
all_items[6,6] = 1

//powder
all_items[7,0] = 0
all_items[7,1] = noone
all_items[7,2] = noone
all_items[7,3] = noone
all_items[7,4] = noone

//pebble
all_items[8,0] = 8
all_items[8,1] = noone
all_items[8,2] = noone
all_items[8,3] = noone
all_items[8,4] = noone

//sand
all_items[9,0] = 9
all_items[9,1] = noone
all_items[9,2] = noone
all_items[9,3] = noone
all_items[9,4] = noone

//stick
all_items[10,0] = 10
all_items[10,1] = noone
all_items[10,2] = noone
all_items[10,3] = noone
all_items[10,4] = noone

//twine
all_items[11,0] = 11
all_items[11,1] = noone
all_items[11,2] = noone
all_items[11,3] = noone
all_items[11,4] = noone

//fire
all_items[12,0] = 12
all_items[12,1] = noone
all_items[12,2] = noone
all_items[12,3] = noone
all_items[12,4] = noone

//create list of all objects in inventory
entire_inv = ds_list_create();
for(i=0;i&lt;item_length;i+=1){
    if all_items[i,0] &gt; 0 {
        entire_inv_name = ds_list_find_value( item_names, i );
        ds_list_add(entire_inv,entire_inv_name)
    }
}

//number of items in entire inventory
entire_inv_length = ds_list_size(entire_inv)

//create starting itmes from entire_inv list
for(i=0;i&lt;entire_inv_length;i+=1){
    start_item = ds_list_find_value(entire_inv,i)
}

//create entire inv slots
for(i=0;i&lt;entire_inv_width;i+=1){
    for(j=0;j&lt;entire_inv_height;j+=1){
        entire_inv_slot[j+i*entire_inv_height]=instance_create(0,0,oSlotEntireInv)
    }
}

//create active inv
active_inv = ds_list_create();
for(i=0;i&lt;active_inv_size;i+=1){
    active_inv_slot[i]=instance_create(0,0,oSlotActiveInv)
}
active_inv_length = ds_list_size(active_inv)

//build menu
recipe = ds_list_create()
for(i=0;i&lt;4;i+=1){
    recipe_slot[i]=instance_create(0,0,oSlotRecipe)
}
recipe_length = ds_list_size(recipe)
for(i=0;i&lt;2;i+=1){
    plus[i]=instance_create(0,0,oPlus)
}
plus[2]=instance_create(0,0,oEquals)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0;i&lt;active_inv_size;i+=1){
    active_inv_slot[i].x = view_xview[0]+36+i*54
    active_inv_slot[i].y = view_yview[0]+36
}

for(i=0;i&lt;entire_inv_width;i+=1){
    for(j=0;j&lt;entire_inv_height;j+=1){
        entire_inv_slot[j+i*entire_inv_height].x=view_xview[0]+36+i*54
        entire_inv_slot[j+i*entire_inv_height].y=view_yview[0]+114+j*54
        if show='SHOW' {
            entire_inv_slot[j+i*entire_inv_height].x=-10000
            entire_inv_slot[j+i*entire_inv_height].y=-10000
        }
    }

}

for(i=0;i&lt;4;i+=1){
    recipe_slot[i].x = view_xview[0]+36+i*78
    recipe_slot[i].y = view_yview[0]+138+entire_inv_height*54
    if show='SHOW' {
        recipe_slot[i].x=-10000
        recipe_slot[i].y=-10000
    }
}

for(i=0;i&lt;3;i+=1){
    plus[i].x=view_xview[0]+74+i*78
    plus[i].y=view_yview[0]+138+entire_inv_height*54
    if show='SHOW' {
        plus[i].x=-10000
        plus[i].y=-10000
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw empty hearts
for(i=0;i&lt;oPlayer1.potential_health;i+=1) {
    draw_sprite( sHeartEmpty, image_index, view_xview[0]+global.winW-oPlayer1.potential_health*30+i*25, view_yview[0]+12 );
}
//draw full hearts
for(i=0;i&lt;health;i+=1) {
    draw_sprite( sHeartFull, image_index, view_xview[0]+global.winW-oPlayer1.potential_health*30+i*25, view_yview[0]+12 );
}

//draw empty photos
for(i=0;i&lt;oPlayer1.picture_total;i+=1) {
    draw_sprite( sPhotoEmpty, image_index, view_xview[0]+global.winW-oPlayer1.picture_total*30+i*25, view_yview[0]+12+18+12 );
}
//draw full photos
for(i=0;i&lt;oPlayer1.picture_num;i+=1) {
    draw_sprite( sPhotoFull, image_index, view_xview[0]+global.winW-oPlayer1.picture_total*30+i*25, view_yview[0]+12+18+12 );
}
// draw current FPS
draw_text(view_xview[0]+global.winW-30,view_yview[0]+global.winH-60, "FPS " +string(fps))


kMouseL = mouse_check_button(mb_left)
kMouseLp = mouse_check_button_pressed(mb_left)
kMouseR = mouse_check_button_pressed(mb_right)

show_posx = view_xview[0]+36
show_posy = view_yview[0]+72
if abs(mouse_x - show_posx) &lt; 26 and abs(mouse_y - show_posy) &lt; 8 {
    draw_set_color(c_red)
    if kMouseLp and show = 'SHOW' {
        show = 'HIDE'
    } else if kMouseLp {
        show = 'SHOW'
    }
} else {
    draw_set_color(c_white)
}
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_text(show_posx,show_posy, string(show))
draw_set_halign(fa_right)
draw_set_valign(fa_top)
draw_set_color(c_white)


//draw active inv items
for(i=0;i&lt;active_inv_length;i+=1){
    active_item_posx = view_xview[0]+36+i*54
    active_item_posy = view_yview[0]+36
    active_inv_name = ds_list_find_value(active_inv,i)
    active_item_id = ds_list_find_index(item_names,active_inv_name)
    active_item_count = all_items[active_item_id,0]
    draw_sprite(active_inv_name,0,active_item_posx,active_item_posy)
    draw_text( view_xview[0]+60+i*54, view_yview[0]+35, string(active_item_count))
    
    if show = 'HIDE' {
    if kMouseL and drag = false {
        if abs(mouse_x - active_item_posx) &lt; 24 and abs(mouse_y - active_item_posy) &lt; 24 {
            ds_list_delete(active_inv, i)
            drag_item_name = ds_list_find_value(item_names,active_item_id)
            drag_item_id = ds_list_find_index(item_names,drag_item_name)
            drag_item_count = all_items[active_item_id,0]
            //number of items in active inventory update
            active_inv_length = ds_list_size(active_inv)
            drag = true
            active_inv_slot[i].selected = false
            active_inv_slot[i].image_index = 0
        }
    }
    }
}

if show = 'HIDE' {

//draw entire inv items
for(i=0;i&lt;entire_inv_length;i+=1){
    draw_inv_name = ds_list_find_value(entire_inv,i)
    item_posx = view_xview[0]+36+(i mod entire_inv_width)*54
    item_posy = view_yview[0]+114+(i div entire_inv_width)*54
    draw_item_id = ds_list_find_index(item_names,draw_inv_name)
    draw_item_count = all_items[draw_item_id,0]
    draw_sprite(draw_inv_name,0,item_posx,item_posy)
    draw_text( view_xview[0]+60+(i mod entire_inv_width)*54, view_yview[0]+114+(i div entire_inv_width )*54, string(draw_item_count))
    
    if kMouseL and drag = false {
        if abs(mouse_x - item_posx) &lt; 24 and abs(mouse_y - item_posy) &lt; 24 {
            ds_list_delete(entire_inv, i)
            drag_item_name = ds_list_find_value(item_names,draw_item_id)
            drag_item_id = ds_list_find_index(item_names,drag_item_name)
            drag_item_count = all_items[draw_item_id,0]
            //number of items in entire inventory update
            entire_inv_length = ds_list_size(entire_inv)
            drag = true
        }
    }
}

//draw recipe items
for(i=0;i&lt;recipe_length;i+=1){
    recipe_item_posx = view_xview[0]+36+i*78
    recipe_item_posy = view_yview[0]+138+entire_inv_height*54
    recipe_item_name = ds_list_find_value(recipe,i)
    recipe_item_id = ds_list_find_index(item_names,recipe_item_name)
    recipe_item_count = all_items[recipe_item_id,0]
    draw_sprite(recipe_item_name,0,recipe_item_posx,recipe_item_posy)
    draw_text( view_xview[0]+60+i*78, view_yview[0]+138+entire_inv_height*54, string(recipe_item_count))

    if kMouseL and drag = false {
        if abs(mouse_x - recipe_item_posx) &lt; 24 and abs(mouse_y - recipe_item_posy) &lt; 24 {
            ds_list_delete(recipe, i)
            drag_item_name = ds_list_find_value(item_names,recipe_item_id)
            drag_item_id = ds_list_find_index(item_names,drag_item_name)
            drag_item_count = all_items[recipe_item_id,0]
            //number of items in recipe update
            recipe_length = ds_list_size(recipe)
            drag = true
        }
    }
}

//check for hover over build item
if abs(mouse_x - (view_xview[0]+36+3*78)) &lt; 24 and abs(mouse_y - (view_yview[0]+128+entire_inv_height*54)) &lt; 34 {
    build_hover = true
    recipe_slot[3].selected = true
    recipe_slot[3].image_index = 1
} else {
    build_hover = false
    recipe_slot[3].selected = false
    recipe_slot[3].image_index = 0
}

//determine if recipe items create something
if recipe_length &gt; 1 {
        //loop through all items checking if there is a match with recipe item
        for(j=0;j&lt;item_length;j+=1){
            match_count = 0
            for(i=0;i&lt;recipe_length;i+=1){
                recipe_match_name = ds_list_find_value(recipe,i)
                if all_items[j,2]!=noone {
                    req_count = -1
                    if all_items[j,3]!=noone {
                        req_count = 2
                        if all_items[j,4]!=noone {
                            req_count = 3
                        }
                    }
                } else {
                    req_count = -1
                }
                if recipe_length = req_count {
                    if all_items[j,2]=recipe_match_name or all_items[j,3]=recipe_match_name or all_items[j,4]=recipe_match_name {
                        match_count += 1
                    }
                }
            }
            if match_count = req_count {
                buildable_item = ds_list_find_value(item_names,j)
                buildable_item_id = j
                break
            } else {
                buildable_item = noone
            }
        }
    if buildable_item != noone {
        draw_sprite(buildable_item,0,view_xview[0]+36+3*78,view_yview[0]+138+entire_inv_height*54)
        draw_set_halign(fa_center)
        draw_set_valign(fa_bottom)
        if build_hover=true {
            draw_set_color(c_red)
        } else {
            draw_set_color(c_white)
        }
        draw_text( view_xview[0]+36+3*78, view_yview[0]+114+entire_inv_height*54, 'BUILD')
        draw_set_halign(fa_right)
        draw_set_valign(fa_top)
        draw_set_color(c_white)
        //draw projected loss based on buildable item array info
        for(i=0;i&lt;recipe_length;i+=1){
            recipe_item_name = ds_list_find_value(recipe,i)
            for(j=0;j&lt;recipe_length;j+=1){
                recipe_build_match = all_items[buildable_item_id,2+j]
                if recipe_build_match = recipe_item_name {
                    recipe_item_loss = all_items[buildable_item_id,5+j]
                }
            }
            draw_set_color(c_red);
            draw_text( view_xview[0]+60+i*78, view_yview[0]+160+entire_inv_height*54, "-" + string(recipe_item_loss))
            draw_set_color(c_white);
        }
        //check for build click and test if recipe quantities are enough
        if kMouseLp {
            if abs(mouse_x - (view_xview[0]+36+3*78)) &lt; 24 and abs(mouse_y - (view_yview[0]+128+entire_inv_height*54)) &lt; 34 {
                loss_count = 0
                for(i=0;i&lt;recipe_length;i+=1){
                    recipe_item_name = ds_list_find_value(recipe,i)
                    recipe_id_loss = ds_list_find_index(item_names,recipe_item_name)
                    for(j=0;j&lt;recipe_length;j+=1){
                        recipe_build_match = all_items[buildable_item_id,2+j]
                        if recipe_build_match = recipe_item_name {
                            recipe_item_loss = all_items[buildable_item_id,5+j]
                        }
                    }
                    if all_items[recipe_id_loss,0] - recipe_item_loss &gt;= 0 {
                        loss_count += 1                        
                    } else {
                        loss_count = 0
                    }
                }
                //actually add item and make subtractions
                if loss_count = recipe_length {
                    if all_items[buildable_item_id,0]=0 {
                        ds_list_add(entire_inv,buildable_item)
                        entire_inv_length = ds_list_size(entire_inv)
                    }
                    all_items[buildable_item_id,0]+=1
                    
                    //draw pop where new item is created
                    pop_id = ds_list_find_index(entire_inv,buildable_item)
                    if pop_id = -1 {
                        pop_id2 = ds_list_find_index(active_inv,buildable_item)
                        pop_posx = view_xview[0]+36+pop_id2*54
                        pop_posy = view_yview[0]+36
                    } else {
                        pop_posx = view_xview[0]+36+(pop_id mod entire_inv_width)*54
                        pop_posy = view_yview[0]+114+(pop_id div entire_inv_width)*54
                    }

                    instance_create(pop_posx,pop_posy,oPopFront)
                    for(i=0;i&lt;recipe_length;i+=1){
                        recipe_item_name = ds_list_find_value(recipe,i)
                        recipe_id_loss = ds_list_find_index(item_names,recipe_item_name)
                        for(j=0;j&lt;recipe_length;j+=1){
                            recipe_build_match = all_items[buildable_item_id,2+j]
                            if recipe_build_match = recipe_item_name {
                                recipe_item_loss = all_items[buildable_item_id,5+j]
                            }
                        }
                        all_items[recipe_id_loss,0] -= recipe_item_loss
                    }
                }
            }
        }
    }
}

//draw drag item on mouse and figure out where to drop it
if drag = true {
        draw_sprite(drag_item_name,0,mouse_x,mouse_y)
        draw_text(mouse_x+12,mouse_y,string(drag_item_count))
        if kMouseL = 0 {
            drag = false
            for(i=0;i&lt;active_inv_size;i+=1){
                active_item_posx = view_xview[0]+36+i*54
                active_item_posy = view_yview[0]+36
                if abs(mouse_x - active_item_posx) &lt; 24 and abs(mouse_y - active_item_posy) &lt; 24 and all_items[drag_item_id,1] != noone {
                    list_add = 1
                    list_add_id = i break
                }
            }
            for(i=0;i&lt;3;i+=1){
                recipe_item_posx = view_xview[0]+36+i*78
                recipe_item_posy = view_yview[0]+138+entire_inv_height*54
                if abs(mouse_x - recipe_item_posx) &lt; 24 and abs(mouse_y - recipe_item_posy) &lt; 24 {
                    list_add = 3
                    list_add_id = i break
                }
            }
            if list_add = 2 { //drop into entire inv
                ds_list_add(entire_inv, drag_item_name)
                entire_inv_length = ds_list_size(entire_inv)
            } else if list_add = 1 { //drop into active inv
                if list_add_id &gt; active_inv_length-1 {
                    ds_list_add( active_inv, drag_item_name )
                    active_inv_length = ds_list_size(active_inv)
                } else {
                    replace_active_name = ds_list_find_value(active_inv,list_add_id)
                    ds_list_add(entire_inv, replace_active_name)
                    entire_inv_length = ds_list_size(entire_inv)
                    ds_list_replace( active_inv, list_add_id, drag_item_name )
                }
            } else if list_add = 3 { //drop into recipe list
                if list_add_id &gt; recipe_length-1 {
                    ds_list_add( recipe, drag_item_name )
                    recipe_length = ds_list_size(recipe)
                } else {
                    replace_recipe_name = ds_list_find_value(recipe,list_add_id)
                    ds_list_add(entire_inv, replace_recipe_name)
                    entire_inv_length = ds_list_size(entire_inv)
                    ds_list_replace( recipe, list_add_id, drag_item_name )
                }
            }
            list_add = 2
        }
}

}

//equip that shit!
if keyboard_key &gt;= ord('1') and keyboard_key &lt;= ord('4'){
    for(i=0;i&lt;active_inv_size;i+=1){
        active_inv_slot[i].selected = false
        active_inv_slot[i].image_index = 0
    }
    kNum = real(chr(keyboard_key))-1
    if kNum &lt; active_inv_length {
        equip = kNum
    } else {
        equip = active_inv_length-1
    }
}

if active_inv_length = 1 {
    equip = 0
}

if active_inv_length &gt; 0 {
    active_inv_slot[equip].selected = true
    active_inv_slot[equip].image_index = 1
    active_inv_name = ds_list_find_value(active_inv,equip)
    active_item_id = ds_list_find_index(item_names,active_inv_name)
    active_item_make = all_items[active_item_id,1]
    if kMouseR {
        if all_items[active_item_id,0] &gt; 0 {
            instance_create(oPlayer1.x,oPlayer1.y,active_item_make)
            all_items[active_item_id,0]-=1
        }
    }
    if all_items[active_item_id,0] = 0 {
        ds_list_delete(active_inv,equip)
        active_inv_length = ds_list_size(active_inv)
        active_inv_slot[equip].selected = false
        active_inv_slot[equip].image_index = 0
        if equip &gt; 0 {
            equip-=1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
