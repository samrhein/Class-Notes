<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHumanRunRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setCollisionBounds(-10,-22,10,22)
image_speed=0.4
facing = 'right'
state = 'run'
jump_pause=0
pic_take = false
pic_timer = 0
camera_range = 80
pic_cooldown = 0
seen = false
cone_angle = 0

var fix, inst;
fix = physics_fixture_create()
physics_fixture_set_box_shape(fix, 10, 22)
physics_fixture_set_density(fix, 0.2)
physics_fixture_set_linear_damping(fix, 0.7)
physics_fixture_set_angular_damping(fix, 1)
physics_fixture_set_collision_group(fix, 1)
inst = id
physics_fixture_bind(fix, inst)
physics_fixture_delete(fix)

phy_fixed_rotation = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead_human = instance_create(x,y,oHumanDead)

if facing = 'left'
    dead_human.sprite_index = sHumanDeadLeft
else
    dead_human.sprite_index = sHumanDeadRight
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isCollisionLeft(1) {
  facing = 'right'
}

if isCollisionRight(1) {
  facing = 'left'
}

if isCollisionBottom(3) and (state='jump' or state='falling') {
    state='run'
}

if isCollisionBottom(3)=0 and state!='jump' {
    state='falling'
}

if state = 'idle' {
    if oPlayer1.x &gt; x {
        facing = 'right'
    } else {
        facing = 'left'
    }
}

idle_chance = irandom(80)
jump_chance = irandom(60)



if idle_chance = 1 and state = 'run' {
    state = 'idle'
    idle_time = irandom_range(60,150)
}
if state = 'idle' {
    image_speed = 0.05
    idle_time -= 1
    if idle_time&lt;=0 {
        state = 'run'
    }
}

if facing='right'
    facingpos = 1
else
    facingpos = -1

if state = 'run' {
    image_speed = 0.2
    if abs(phy_speed_x) &lt; 3 {
        if facing = 'right' {
            physics_apply_local_force(0, 0, 15, 0)
        } else {
            physics_apply_local_force(0, 0, -15, 0)
        }
    }
}

if (jump_chance = 1 or instance_position(x+48*facingpos, y, oSolid) != noone) and state = 'run' and jump_pause=0 {
    state = 'jump'
    physics_apply_local_force(0, 0, 0, -200)
}

if state = 'jump' or state = 'falling' {
    jump_pause+=1
    image_speed = 0
}

if jump_pause&gt;10{
    jump_pause=0
}

if collision_line(x, y, oPlayer1.x, oPlayer1.y, oSolid, 0, 1) = noone {
    seen = true
} else {
    seen = false
}

if distance_to_object(oPlayer1) &lt; camera_range and pic_cooldown=0 and seen=true {
    pic_take = true
}

if pic_take = true {
    if pic_timer &lt; 5 {
        pic_timer += 1
    } else {
        pic_take = false
        pic_timer = 0
    }
}

if pic_timer=1 and oPlayer1.picture_num &lt;= oPlayer1.picture_total {
    oPlayer1.pic_take = true
}

if pic_take = true {
    pic_cooldown = 30
} else if pic_cooldown &gt; 0 {
    pic_cooldown -= 1
}

if facing = 'right' {
    if state = 'idle'
        sprite_index = sHumanRunRight
    if state = 'run'
        sprite_index = sHumanRunRight
    if state = 'jump' or state = 'falling'
        sprite_index = sHumanJumpRight
}

if facing = 'left' {
    if state = 'idle'
        sprite_index = sHumanRunLeft
    if state = 'run'
        sprite_index = sHumanRunLeft
    if state = 'jump' or state = 'falling'
        sprite_index = sHumanJumpLeft
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if pic_take = true {
    draw_sprite_ext( sFlashRight, 0, x+18*facingpos, y-19, image_xscale*facingpos, image_yscale, image_angle, image_blend, image_alpha )
}

/*
vx = oPlayer1.x - x
vy = oPlayer1.y - y
vx2 = sqr(oPlayer1.x - x)
vy2 = sqr(oPlayer1.y - y)
len = sqrt(vx2 + vy2)
//norm = dot_product(x,y,oPlayer1.x,oPlayer1.y)
nx = (vx/len)*150 + x
ny = (vy/len)*150 + y
draw_line(x,y,nx,ny)
*/

cone_angle = point_direction(x, y, oPlayer1.x, oPlayer1.y)

if seen = true and distance_to_object(oPlayer1) &lt; camera_range*3
    draw_sprite_ext( sCone, 0, x+18*facingpos, y-19, image_xscale, image_yscale, cone_angle, image_blend, image_alpha )

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
