<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fix, inst;
fix = physics_fixture_create()

physics_fixture_set_polygon_shape(fix)
physics_fixture_add_point(fix, -sprite_width/2+1,sprite_width/2-3)
physics_fixture_add_point(fix, -sprite_width/2+1,-sprite_width/2+3)
physics_fixture_add_point(fix, -sprite_width/2+3,-sprite_width/2+1)
physics_fixture_add_point(fix, sprite_width/2-3, -sprite_width/2+1)
physics_fixture_add_point(fix, sprite_width/2-1, -sprite_width/2+3)
physics_fixture_add_point(fix, sprite_width/2-1, sprite_width/2-3)
physics_fixture_add_point(fix, sprite_width/2-3, sprite_width/2-1)
physics_fixture_add_point(fix, -sprite_width/2+3, sprite_width/2-1)

physics_fixture_set_density(fix, 0.98)
physics_fixture_set_friction(fix, 0.6)
physics_fixture_set_restitution(fix, 0)
physics_fixture_set_linear_damping(fix, 0.4)
physics_fixture_set_angular_damping(fix, 0.4)
physics_fixture_set_collision_group(fix, 1)
inst = id
physics_fixture_bind(fix, inst)
physics_fixture_delete(fix)

setCollisionBounds(-sprite_width/2,-sprite_width/2,sprite_width/2,sprite_width/2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velx = abs(phy_linear_velocity_x)
vely = abs(phy_linear_velocity_y)

if velx &lt; 5 {
    phy_linear_velocity_x = 0
}

if vely &lt; 5 {
    phy_linear_velocity_y = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if velx &gt; 100 or vely &gt; 100 {
    with other {
        instance_destroy()
    }
}

// destroy enemies underneath
calculateCollisionBounds()
if collision_line(round(lb),round(bb+argument0-1),round(rb-1),round(bb+argument0-1),oEnemy,1,1)&gt;0 {
    with other {
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
