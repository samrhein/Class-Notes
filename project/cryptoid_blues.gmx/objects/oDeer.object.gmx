<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDeerChargeLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setCollisionBounds(-27,-15,27,15)
state='idle'
facing='left'
deerSight=150
//deerVel=5
//launched=0
stopped = false
charge_timer=0

var fix, inst;
fix = physics_fixture_create()
physics_fixture_set_box_shape(fix, 27, 15)

physics_fixture_set_polygon_shape(fix)
physics_fixture_add_point(fix, -27,13)
physics_fixture_add_point(fix, -27, -15)
physics_fixture_add_point(fix, 27, -15)
physics_fixture_add_point(fix, 27, 13)
physics_fixture_add_point(fix, 25, 15)
physics_fixture_add_point(fix, -25, 15)

physics_fixture_set_density(fix, 0.2)
physics_fixture_set_linear_damping(fix, 0.4)
physics_fixture_set_angular_damping(fix, 1)
physics_fixture_set_collision_group(fix, 1)
inst = id
physics_fixture_bind(fix, inst)
physics_fixture_delete(fix)

phy_fixed_rotation = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead_deer = instance_create(x,y,oDeerDead)

if facing = 'left'
    dead_deer.sprite_index = sDeerDeadLeft
else
    dead_deer.sprite_index = sDeerDeadRight
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distance_player_x = distance_to_object(oPlayer1)

if distance_player_x &lt; deerSight and state='idle'
{
    state='ready'
    image_index=0
}

if state='ready' and image_index&gt;=5
    state='charge'

if state='idle'
{
    //xVel=0
    image_speed=0.07
}else if state='ready'
{
    //xVel=0
    image_speed=0.1
    if x &lt; oPlayer1.x {
        facing = 'right'
    }else{
        facing = 'left'
    }
}else if state='charge'
{
    image_speed=0.3
    charge_timer+=1
   if abs(phy_speed_x) &lt; 4 {
    if facing = 'right' {
        physics_apply_local_force(0, 0, 100, 0)
    } else {
        physics_apply_local_force(0, 0, -100, 0)
    }
    }
    if abs(phy_speed_x)&lt;0.01 and charge_timer &gt; 30 {
        state='idle'
        charge_timer =0
    }
    stopped=false
}

/*
if isCollisionBottom(1) and launched=0
  yVel=0
  
if launched &gt; 0 {
    launched-=1
}*/

if isCollisionLeft(1) and stopped=false
{
  //xVel=deerVel
  facing='right'
  state='idle'
  stopped=true
}
if isCollisionRight(1) and stopped=false
{
  //xVel=-deerVel
  facing='left'
  state='idle'
  stopped=true
}

//if isCollisionSolid()
  //y-=2

//if isCollisionTop(1)
//    yVel=1
  
if facing='right'
{
    if state='charge'
        sprite_index=sDeerChargeRight
    if state='idle'
        sprite_index=sDeerIdleRight
    if state='ready'
        sprite_index=sDeerReadyRight
}

if facing='left'
{
    if state='charge'
        sprite_index=sDeerChargeLeft
    if state='idle'
        sprite_index=sDeerIdleLeft
    if state='ready'
        sprite_index=sDeerReadyLeft
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.hurting=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
