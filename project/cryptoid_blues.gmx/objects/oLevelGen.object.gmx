<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set up global variables about the terrain
global.BLOCK_WIDTH = 48;
global.CHUNK_WIDTH = floor(window_get_width()/global.BLOCK_WIDTH);
global.CHUNK_WIDTH = 25;
global.BARRI = instance_find(oPlayer1,0);
global.CHUNK_HEIGHT = 30;

first_chunk = -1;
latest_chunk = -1;
totalChunks = 3;


global.gauntlet = noone;
global.final = noone;


prevLvlId = -1;
lvlSurface = surface_create(sprite_get_width(lvlChunk_000), sprite_get_height(lvlChunk_000));

// Create a map of sprites so then can easily be accessed
global.SPRITE_MAP = ds_map_create();
no = sprite_create_from_screen(0,0,1,1,false,false,false,false);
sprite_delete(no);
for (i=0; i&lt;no; i+=1) {
    if (sprite_exists(i)) {
        ds_map_add(global.SPRITE_MAP,sprite_get_name(i),i);
    }
}

// Create a map of object templates so they can be easily accessed
global.OBJECT_MAP = ds_map_create();

for(i = 0 ; i&lt;1000; i+=1){
    if(object_exists(i)){
        ds_map_add(global.OBJECT_MAP,object_get_name(i),i);
    }
}

// Read the lines of the included color map text file to map stuff to icons
typeMap = ds_map_create();

fileIndex = file_text_open_read(working_directory + "\Terrain\colorMap.txt");
//show_debug_message("FILE EXISTS: " + string(file_exists(working_directory + "\Terrain\colorMapTest.txt")));

line = "";
do{    
    //get the next line
    line = file_text_read_string(fileIndex);
    file_text_readln(fileIndex);
    
    if(line == "")continue;
    
    //find the first space
    pos = string_pos(" ", line);
    //get the string after the space
    lineTemp = string_copy(line, pos+1, string_length(line) - pos);
    letter = string_copy(lineTemp,1,1);
    //get the next space
    pos = string_pos(" ", lineTemp);
    //get the string after the space
    typeStr = string_copy(lineTemp,pos+1,string_length(lineTemp) - pos);
    //remove any extra spaces
    string_replace_all(lineTemp, " ", "");
    
    ds_map_add(typeMap,letter,ds_map_find_value(global.OBJECT_MAP,typeStr));
    show_debug_message(line);
}until( file_text_eof(fileIndex));

file_text_close(fileIndex);


count=0;
for(i=ds_map_find_first(typeMap); count&lt;ds_map_size(typeMap); i=ds_map_find_next(typeMap,i)) {
    show_debug_message(i + " : " + object_get_name(ds_map_find_value(typeMap,i)));
    
    count+=1;
}







































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* A "Chunk" is a single piece of the level */
blockWidth = global.BLOCK_WIDTH;
chunkWidth = global.CHUNK_WIDTH;
barri = instance_find(oPlayer1,0);
chunkPos = floor((barri.x/blockWidth)/chunkWidth);

gauntletSpacing = 3;

/* generate Chunks two ahead */
if((latest_chunk-2) &lt; chunkPos){
    //create background
    
    down = global.BLOCK_WIDTH * 8;
    
    //create trees in Background
    instance_create(latest_chunk*chunkWidth*blockWidth,down, oTreesMid);
    instance_create(latest_chunk*chunkWidth*blockWidth + chunkWidth*blockWidth/2,down, oTreesMid);
    instance_create(latest_chunk*chunkWidth*blockWidth,down, oTreesFar);
    instance_create(latest_chunk*chunkWidth*blockWidth + chunkWidth*blockWidth/2,down, oTreesFar);

    //start with a bedrock for non gauntlet chunks
    lvlHeader = "lvlChunk_";
    
    //if it's the first chunk
    if(latest_chunk == first_chunk){
        lvlHeader = "strtChunk_";
    
    //if it's time for the last chunk
    }else if(latest_chunk == totalChunks){
        lvlHeader = "winChunk_";
        if(global.final==noone){
            global.final = instance_create(latest_chunk*chunkWidth*blockWidth,0,oFinalPhase);
        }
        
    //if it's time for a gauntlet phase
    }else if(latest_chunk mod gauntletSpacing == (gauntletSpacing-1)){
        //and it hasnt spawned a gauntlet or the spawned one is old
        if(global.gauntlet != noone &amp;&amp; global.gauntlet.x !=latest_chunk*chunkWidth*blockWidth || global.gauntlet == noone){
            global.gauntlet = instance_create(latest_chunk*chunkWidth*blockWidth,0,oGauntletPhase);
        }
        lvlHeader = "gntChunk_";
    }else{
    }
    
    //get the set of sprites to pick from
    newSet = 0;
    if(newSet&lt;10){
        newSet = "00" + string_format(newSet,1,0);
    }else if(newSet&lt;100){
        newSet = "0" + string_format(newSet,2,0);
    }else{
        newSet = string_format(newSet,2,0);
    }
    
    newId = 0;
    if(newId&lt;10){
        newId = "00" + string_format(newId,1,0);
    }else if(newId&lt;100){
        newId = "0" + string_format(newId,2,0);
    }else{
        newId = string_format(newId,2,0);
    }
    
    
    {
        //Code for string loading of terrain
        fileIndex = file_text_open_read(working_directory + "\Terrain\" + lvlHeader + newSet + newId + ".terr");
        h = 0;
        
        //go through every line in the text file
        do{
            line = file_text_read_string(fileIndex);
            //show_debug_message(line);
            file_text_readln(fileIndex);
            
            //go through every character 
            for(w = 1 ; w &lt;= string_length(line) ; w+=1){
                
                //get block type for the character and place the blocks
                block = ds_map_find_value(typeMap, string_char_at(line,w));
                if(string_char_at(line,w)!="_"){
                    instance_create(
                        latest_chunk*chunkWidth*blockWidth+blockWidth*(w-1),
                        blockWidth*h,
                        block
                    );
                }
            }
            h+=1;
            
        }until(file_text_eof(fileIndex));
        
        //lay out bedrock at the bottom most layer
        for(i = 0; i&lt;global.CHUNK_WIDTH; i+=1){
            instance_create(
                latest_chunk*chunkWidth*blockWidth+blockWidth*i,
                global.CHUNK_HEIGHT*global.BLOCK_WIDTH,
                oRandomBedrock
            );
            
            //draw cloes trees in the background
            if(irandom(10) == 0){
                instance_create(
                    latest_chunk*chunkWidth*blockWidth+blockWidth*i,
                    (global.CHUNK_HEIGHT/4)*global.BLOCK_WIDTH + global.BLOCK_WIDTH * irandom(3),
                    oTreeFront
                );
            }
            
            //draw near trees in the background
            if(irandom(10) == 0){
                instance_create(
                    latest_chunk*chunkWidth*blockWidth+blockWidth*i,
                    down,
                    oTreesNear
                );
            }
        }
        
        file_text_close(fileIndex);
        
        //increment the latest chunk that had been entered
        latest_chunk +=1;
    }
    
    /*
    //draw the new chunk from the sprite
    surface_set_target(lvlSurface);
    spr = ds_map_find_value(global.SPRITE_MAP,lvlHeader + newSet);
    
    newId = random(sprite_get_number(spr));
    draw_sprite(
        spr,
        newId,
        0,
        0);

    
    for( w=0 ; w &lt; surface_get_width(lvlSurface) ; w+=1){
        for( h=0 ; h &lt; surface_get_height(lvlSurface) ; h+=1){
            
            if(surface_getpixel(lvlSurface, w, h) == $ffffff){
                continue;
            }else{
                instance_create(
                    latest_chunk*chunkWidth*blockWidth+blockWidth*w,
                    blockWidth*h,
                    type
                );
            }
        }
    }
        
    surface_reset_target();
    */

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(lvlSurface,global.BARRI.x,global.BARRI.y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
